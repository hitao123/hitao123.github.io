(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{286:function(t,e,n){"use strict";n.r(e);var a=n(0),c=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("用法")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("字符串方法")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("match")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回一个数组，失败返回null，类似于 RegExp.exec()方法")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("str.match(reg)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("search")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回匹配到的位置索引，失败时返回-1")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("str.search(regexp)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("replace")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("使用替换字符串替换掉匹配到的子字符串。")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("str.replace(str或reg,substr或 function)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("split")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回一个数组")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("str.split([separator或reg[, limit]])")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("regEXp对象方法")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("test")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("成功返回true,失败返回false")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("regexObj.test(str)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("exec")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回一个数组,失败返回null,[0]匹配的全部字符串[1]...[n]括号中的分组捕获,index  匹配到的字符位于原始字符串的基于0的索引值,input 原始字符串")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("regexObj.exec(str)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("igm")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("匹配模式，可选")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("i,忽略大小写，g,全局匹配，m,匹配多行")])])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\\s 匹配空白字符 匹配一个空白字符，包括空格、制表符、换页符和换行符\n\\S 匹配非空白字符 [^\\f\\n\\r\\t\\v]\n\\d 匹配数字 [0-9]\n\\D 匹配非数字 [^0-9]\n\\w 匹配单字字符 [0-9A-Za-z_]\n\\W 匹配非单字字符 [^0-9A-Za-z_]\n\\b 匹配边界 /\\bm/匹配“moon”中得‘m’ ,/\\w\\b\\w/将不能匹配任何字符串\n\\r 匹配回车符\n\\n 匹配换行符\n\\t 匹配制表符\n\\1 匹配捕获的，在正则表达式里面用，外部用 $1\n.  匹配除了换行符的单个字符\n?  匹配前面表达式 {0,1}\n{n,m} 至少匹配n个，最多匹配m个\n*  匹配前面表达式 {0,}\n+  匹配前面表达式 {1,}\n(x) 匹配 'x' 并且记住匹配项\n(?:) 匹配括号里面的，但不捕获\n(?=) 正向肯定查找 /Jack(?=Sprat)/会匹配到'Jack'仅仅当它后面跟着'Sprat'\n(?!) 正向否定查找 /Jack(?!Sprat)/会匹配到'Jack'仅仅当它后面没有跟着'Sprat'\n(?<= x) 正向回查 '2000 (?<=Office|Word|Excel)'匹配 \" Office2000\" 中的 \"2000\"\n(?<!= x) 负向回查 '2000 (?<!Office|Word|Excel)'匹配 \" Windows2000\" 中的 \"2000\"\n\n捕获分组会消耗字符串，不捕获分组不会消耗字符串\n捕获分组可以被引用，不捕获分组不能被引用，不占用索引（从1开始），没有保存\n在内存中\n")])])])])}),[],!1,null,null,null);e.default=c.exports}}]);