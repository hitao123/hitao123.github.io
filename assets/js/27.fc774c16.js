(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{285:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("很早就听说过"),n("code",[t._v("Redux,React")]),t._v(",一直没有时间去学习一下，趁现在空闲的时间里，自己研究一下。"),n("strong",[n("code",[t._v("Redux")]),t._v(" 和 "),n("code",[t._v("React")]),t._v(" 之间没有关系。"),n("code",[t._v("Redux")]),t._v("支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。")])])]),t._v(" "),n("h3",{attrs:{id:"action"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),n("blockquote",[n("p",[t._v("Action是将数据从应用传到Store的有效载体，是Store数据的唯一来源，\n一般会通过 Store.dispatch() 将action 传到 Store。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("action 定义 除了type字段，其他字段可以自定义，action 实质上就是一个对象\n    const ADD_TODO = 'Add_todo'\n    {\n    type: ADD_TODO\n    text: 'my first redux app'\n    }\n")])])]),n("blockquote",[n("p",[t._v("Action 创建函数(简单返回一个action)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    function addTodo(text) {\n      return {\n        type: ADD_TODO,\n        text\n      }\n    }\n    - Redux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程\n    dispatch(addTodo(text))\n    - 或者创建一个 被绑定的 action 创建函数 来自动 dispatch：\n    const boundAddTodo = (text) => dispatch(addTodo(text))\n    boundAddTodo(text);\n    - 项目里面大部分是通过react-redux 提供的 connect() 帮助器来调用dispatch。\n")])])]),t._v(" "),n("h3",{attrs:{id:"reducer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("Action")]),t._v(" 只是描述了有事情发生了这一事实，并没有指明应用如何更新 "),n("code",[t._v("state")]),t._v("。而这正是"),n("code",[t._v("reducer")]),t._v("要做的事情."),n("code",[t._v("reducer")]),t._v(" 就是一个纯函数，接收旧的 state 和"),n("code",[t._v("action")]),t._v("，返回新的 state。(纯函数可以简单的理解为，相同的输入一定有相同的输出)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("(previousState, action) => newState\n\n1. 不要在Reducer 里做以下三件事    \n    - 修改传入参数；\n    - 执行有副作用的操作，如 API 请求和路由跳转；\n    - 调用非纯函数，如 Date.now() 或 Math.random()。\n\n2. Redux 首次执行时，state 为 undefined，可以利用ES6 默认值\n\n    function todoApp(state = initialState, action) {\n      // 这里暂不处理任何 action，\n      // 仅返回传入的 state。\n      return state\n    }\n\n    //reducer\n\n    function todoApp(state = initialState, action) {\n      switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n          return Object.assign({}, state, {\n            visibilityFilter: action.filter\n          })\n        default:\n          return state\n      }\n    }\n    //使用tips: 不要修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })\n\n3. Redux 提供了 combineReducers() 工具类\n    import { combineReducers } from 'redux';\n\n    const todoApp = combineReducers({\n      visibilityFilter,\n      todos\n    })\n\n    export default todoApp;\n    ==================\n    等价于下面这种写法\n    ==================\n    export default function todoApp(state = {}, action) {\n      return {\n        visibilityFilter: visibilityFilter(state.visibilityFilter, action),\n        todos: todos(state.todos, action)\n      }\n    }\n\n")])])]),n("h3",{attrs:{id:"store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" Store")]),t._v(" "),n("blockquote",[n("p",[t._v("Store 有以下职责：")])]),t._v(" "),n("ul",[n("li",[t._v("维持应用的 state；")]),t._v(" "),n("li",[t._v("提供 getState() 方法获取 state；")]),t._v(" "),n("li",[t._v("提供 dispatch(action) 方法更新 state；")]),t._v(" "),n("li",[t._v("通过 subscribe(listener) 注册监听器;")]),t._v(" "),n("li",[t._v("通过 subscribe(listener) 返回的函数注销监听器。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    import { createStore } from 'redux'\n    let store = createStore(todoApp)\n    //createStore() 的第二个参数是可选的, 用于设置 state 初始状态。\n")])])]),n("h3",{attrs:{id:"react-redux-绑定库带来的变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-redux-绑定库带来的变化"}},[t._v("#")]),t._v(" react-redux 绑定库带来的变化")]),t._v(" "),n("h4",{attrs:{id:"容器组件（container-components）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器组件（container-components）"}},[t._v("#")]),t._v(" 容器组件（Container Components）")]),t._v(" "),n("h4",{attrs:{id:"展示组件（presentational-components）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#展示组件（presentational-components）"}},[t._v("#")]),t._v(" 展示组件（Presentational Components）")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("展示组件")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("容器组件")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("作用")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("描述如何展现（骨架、样式）")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("描述如何运行（数据获取、状态更新）")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("直接使用Redux")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("是")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("数据来源")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("props")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("监听 Redux state")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("数据修改")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("从 props 调用回调函数")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("向 Redux 派发 actions")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("调用方式")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("手动")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("通常由 React Redux 生成")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("大部分的组件都应该是展示型的，但一般需要少数的几个容器组件把它们和 Redux store 连接起来。")])]),t._v(" "),n("h4",{attrs:{id:"与使用react-redux之后相比较变化点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与使用react-redux之后相比较变化点"}},[t._v("#")]),t._v(" 与使用"),n("code",[t._v("react-redux")]),t._v("之后相比较变化点")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("====================\n//使用react-redux之前  需要 store.subscribe()\n====================\nconst store = createStore(counter);\nconst rootEl = document.getElementById('root');\nconst render = () => ReactDOM.render(\n        <Counter \n            value={store.getState()}\n            onIncrement={() => store.dispatch({type: 'INCREMENT'})}\n            onDecrement={() => store.dispatch({type: 'DECREMENT'})}\n        />,\n        rootEl\n    );\nrender();\nstore.subscribe(render);\n====================\n//使用react-redux之后 全局store \n====================\nconst store = createStore(reducer)\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n//action   components containers reducers 分层\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => {\n    dispatch(setVisibilityFilter(ownProps.filter))\n  }\n})\nconst FilterLink = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\nexport default FilterLink\n\n=======\nreducers\n=======\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n})\nexport default todoApp\n")])])]),n("h3",{attrs:{id:"状态改变过程梳理-demo3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态改变过程梳理-demo3"}},[t._v("#")]),t._v(" 状态改变过程梳理(demo3)")]),t._v(" "),n("blockquote",[n("p",[t._v("输入点击添加按钮    dispatch(addTodo(input.value))")])]),t._v(" "),n("h4",{attrs:{id:"action-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#action-2"}},[t._v("#")]),t._v(" action")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{\n    type: 'ADD_TODO',\n    id: 1,                  =========>action\n    text: 1321\n}\n")])])]),n("h4",{attrs:{id:"reducers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reducers"}},[t._v("#")]),t._v(" reducers")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[{\n    id: 1,\n    text: 1321,   ========>state \n    completed: false\n}]\nstore.subscribe() UI 更新\ntodolist 状态发生改变\n\ntodo 数组参数传递 \nonTodoClick 函数传递  toggletodo\n\ntodolist 开始渲染\n刚开始都是 仅仅只有All 为链接，其他为未激活状态，点击之后可以设置自己的状态\n")])])]),n("h3",{attrs:{id:"异步回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步回调"}},[t._v("#")]),t._v(" 异步回调")]),t._v(" "),n("h4",{attrs:{id:"createstore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#createstore"}},[t._v("#")]),t._v(" createStore")]),t._v(" "),n("div",{staticClass:"language-//const store = createStore(reducer,applyMiddleware(...middleware)) extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    function createStore(reducer, preloadedState, enhancer) {\n      var _ref2;\n    //出错处理，可以学习，代码健壮性\n      if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n        enhancer = preloadedState; //传入两个值的时候，会将 preloadedState 赋值给 enhancer ，而且enhancer 只能是applyMiddleware方法\n        preloadedState = undefined;\n      }\n      if (typeof enhancer !== 'undefined') {\n        if (typeof enhancer !== 'function') {\n          throw new Error('Expected the enhancer to be a function.');\n        }\n        return enhancer(createStore)(reducer, preloadedState); //这里将createStore 传进去\n      }\n      if (typeof reducer !== 'function') {\n        throw new Error('Expected the reducer to be a function.');\n      }\n      //全局变量\n      var currentReducer = reducer;\n      var currentState = preloadedState;\n      var currentListeners = [];\n      var nextListeners = currentListeners;\n      var isDispatching = false;\n\n      function getState() {\n        return currentState;\n      }\n\n      function subscribe(listener) {\n        if (typeof listener !== 'function') {\n          throw new Error('Expected listener to be a function.');\n        }\n        var isSubscribed = true;\n        ensureCanMutateNextListeners();\n        nextListeners.push(listener);\n        return function unsubscribe() {\n          if (!isSubscribed) {\n            return;\n          }\n          isSubscribed = false;\n\n          ensureCanMutateNextListeners();\n          var index = nextListeners.indexOf(listener);\n          nextListeners.splice(index, 1);\n        };\n      }\n\n      function dispatch(action) {\n        if (!(0, _isPlainObject2['default'])(action)) {\n          throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n        }\n\n        if (typeof action.type === 'undefined') {\n          throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n        }\n\n        if (isDispatching) {\n          throw new Error('Reducers may not dispatch actions.');\n        }\n\n        try {\n          isDispatching = true;\n          currentState = currentReducer(currentState, action);\n        } finally {\n          isDispatching = false;\n        }\n\n        var listeners = currentListeners = nextListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i]();\n        }\n        return action;\n      }\n\n      return _ref2 = {\n        dispatch: dispatch,\n        subscribe: subscribe,\n        getState: getState\n    }\n")])])]),n("h4",{attrs:{id:"middleware"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" Middleware")]),t._v(" "),n("div",{staticClass:"language-// applyMiddleware 参数是一个数组，里面传入中间件 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    function applyMiddleware() {\n     //Array(5) 产生大小为5的数组\n      for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n        middlewares[_key] = arguments[_key];\n      }\n\n      return function (createStore) {\n        return function (reducer, preloadedState, enhancer) {\n          var store = createStore(reducer, preloadedState, enhancer);\n          var _dispatch = store.dispatch; //包装全局 store.dispatch 方法\n          var chain = []; \n\n          var middlewareAPI = {\n            getState: store.getState,\n            dispatch: function dispatch(action) {\n              return _dispatch(action);\n            }\n          }; //将 getState dispatch 方法暴露给每一个中间件\n          chain = middlewares.map(function (middleware) {\n            return middleware(middlewareAPI); //\n          });\n          \n          _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);\n               //compose(f, g, h) is identical to doing    * (...args) => f(g(h(...args))).\n\n          return _extends({}, store, {\n            dispatch: _dispatch //注意这里的store 还是原来的 store 但是 dispatch 是经过组合的dispatch\n          });\n        };\n      };\n    }\n")])])]),n("h3",{attrs:{id:"使用redux开发过程遇到的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用redux开发过程遇到的问题"}},[t._v("#")]),t._v(" 使用Redux开发过程遇到的问题")]),t._v(" "),n("h4",{attrs:{id:"combinereducers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combinereducers"}},[t._v("#")]),t._v(" combineReducers")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("combineReducers")]),t._v(" 辅助函数的作用是，把一个由多个不同"),n("code",[t._v("reducer")]),t._v("函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("combineReducers({ todos: myTodosReducer, counter: myCounterReducer })\n")])])]),n("h4",{attrs:{id:"connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect()")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])()\n- mapStateToProps(state,ownsProps)省略，组件将不会监听 Redux store\n- mapDispatchToProps(dispatch,ownsProps)\n    1. 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。\n    2.如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）\n    \n")])])]),n("h4",{attrs:{id:"箭头函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),n("blockquote",[n("p",[t._v("如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var getTempItem = id => ({ id: id, name: "Temp" });\n')])])]),n("h4",{attrs:{id:"es6扩展运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6扩展运算符"}},[t._v("#")]),t._v(" ES6扩展运算符")]),t._v(" "),n("blockquote",[n("p",[t._v("扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//rest 参数 ，将参数放在数组里面，只能放在最后\nfunction add(...values) {\n   let sum = 0;\n\n   for (var val of values) {\n      sum += val;\n   }\n\n   return sum;\n}\nadd(2, 5, 3) // 10\n\n//对象扩展\nlet z = { a: 3, b: 4 };\nlet n = { ...z };\nn // { a: 3, b: 4 }\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n")])])]),n("h3",{attrs:{id:"传统的异步与react异步有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统的异步与react异步有什么区别"}},[t._v("#")]),t._v(" 传统的异步与React异步有什么区别")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("React")]),t._v(" 是通过状态来改变的，单项数据流，数据只能由父节点流向子节点，状态的改变会才会引起UI的变化，"),n("code",[t._v("Angular")]),t._v(" 是双向数据流，任意方向的改变都会引起UI变化，数据可以从子节点流向父节点，在子类绑定"),n("code",[t._v("ng-model")]),t._v(",在父类显示\n在"),n("code",[t._v("Angular")]),t._v("里面，发送"),n("code",[t._v("Ajax")]),t._v(" 请求，返回一个promise 对象，"),n("code",[t._v("ui")]),t._v(" 相关的变量可以再回调里面处理， 而在再"),n("code",[t._v("React")]),t._v(" 里面要想改变UI必须重新设定"),n("code",[t._v("state")]),t._v(" 假如是配合Redux 必须调用dispatch(action)，然后reducer 根据 oldState，action 返回 newState 来更新UI，而像"),n("code",[t._v("React")]),t._v("这样通过发起一次dispatch，再引起UI变化都是同步，React 要做到异步需要使用中间件的概念，"),n("code",[t._v("reducer、action、state")]),t._v(" 里面都不适合处理，放在"),n("code",[t._v("dispatch(action)")]),t._v("里面比较合理，一般"),n("code",[t._v("dispatch(action)")]),t._v(" 里面"),n("code",[t._v("action")]),t._v("只能是一个"),n("code",[t._v("Object")]),t._v('  操作开始时，送出一个 Action，触发 State 更新为"正在操作"状态，View 重新渲染 操作结束后，再送出一个 Action，触发 State 更新为"操作结束"状态，View 再一次重新渲染')])])])}),[],!1,null,null,null);e.default=r.exports}}]);