(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{288:function(t,e,a){"use strict";a.r(e);var n=a(0),c=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"http2与http-1-x系列对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2与http-1-x系列对比"}},[t._v("#")]),t._v(" http2与http 1.x系列对比")]),t._v(" "),a("h4",{attrs:{id:"网络五层协议-tls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络五层协议-tls"}},[t._v("#")]),t._v(" 网络五层协议+TLS")]),t._v(" "),a("blockquote",[a("p",[t._v("简单介绍一下网络的内容")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("工作层")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("作用")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("详情")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("物理层")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("端对端的物理链路")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("电脑的网线接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("数据链路层(MAC层)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("负责帧的封装,透明传输，差错检测")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("PPP协议帧的格式，首部四个字段，尾部四个字段，中间是IP数据报，一般不超过1500字节,尾部校验和同步码，如果是mac帧，这里mac帧会有源mac地址，目的mac地址")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("网络层(IP层)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("向上提供灵活的、无连接、尽最大努力交付数据包服务")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与IP协议配套使用的还有ARP，ICMP，IGMP，IP数据包格式，固定20字节首部，主要有版本(ipv4,ipv6),片偏移，首部校验和，原ip地址，目的ip地址，可选字段，还有数据部分")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("传输层")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("运输层为应用进程之间端对端的逻辑通信")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("主要有面向连接的TCP和无连接的UDP，UDP首部，源端口，目的端口，数据报长度，首部和数据部分一起校验，加上伪首部，TCP首部最小长度20字节")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("TLS层")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("解决网络数据安全问题")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("https 的数据都是密文传输，保证不被篡改 "),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSL"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("应用层")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("通过位于不同主机的多个应用进程之间的通信协议和协同工作来完成的")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("...")])])])]),t._v(" "),a("h4",{attrs:{id:"http-1-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-x"}},[t._v("#")]),t._v(" http 1.x")]),t._v(" "),a("blockquote",[a("p",[t._v("说到"),a("code",[t._v("http")]),t._v("(超文本传输协议)，想到"),a("code",[t._v("B/S")]),t._v("架构，想到每一次我们从输入网址，敲击回车键，后面的一系列事件，首先是DNS解析，一般本地会有你经常访问的 DNS解析，假如没有，就会去本地DNS服务器查询，"),a("code",[t._v("DNS")]),t._v("一般是使用UDP协议，获得"),a("code",[t._v("IP")]),t._v("地址之后，接着就是"),a("code",[t._v("TCP")]),t._v("三次握手建立连接，然后就是"),a("code",[t._v("SSL")]),t._v("的握手协议，"),a("code",[t._v("Client Hello--\x3eServer Hello 、server certificate、server key exchange ----\x3eserver hello done ---\x3e application data")]),t._v(",然后两个端之间建立了连接，进行数据的传递。\n"),a("strong",[t._v("包在端到端的传递")]),t._v("\n以访问"),a("code",[t._v("taobao.com")]),t._v("为例，由于IP不在"),a("code",[t._v("192.168.1.X")]),t._v("这个网段，ARP协议不起作用，直接将包发送给我们路由器，也就是默认网关，通过路由，中间还有好多协议，到达"),a("code",[t._v("taobao.com")]),t._v("的"),a("code",[t._v("Tengine")]),t._v("负载均衡服务器，然后到达某一个服务器的"),a("code",[t._v("443")]),t._v("端口，这里就是端到端，我们电脑上运行的"),a("code",[t._v("chrome一个tab")]),t._v(" 对应一个进程，到某一台服务器上运行服务器的443端口的那个进程")])]),t._v(" "),a("p",[t._v("完成上面那些之后，我们看到淘宝的首页展示在我们面前，我们要请求"),a("code",[t._v("CSS，HTML，js,picture")]),t._v("这些静态资源，而这些静态资源可能是从阿里云CDN获取的，可能又要建立上面的连接，发送"),a("code",[t._v("GET")]),t._v("请求，重复上面的步骤。")]),t._v(" "),a("h5",{attrs:{id:"http1-x-请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-x-请求头"}},[t._v("#")]),t._v(" http1.x 请求头")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<request line>  //请求行 回车符 换行符  \\r\\n\n<headers>       //请求头 回车符 换行符  \\r\\n\n<blank line>    //空行   回车符 换行符  \\r\\n\n[<request-body>] //请求体，只有post有,get请求自带拼接参数\n\n//get请求\nGET http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=413631      \nAccept:*/*\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8\nConnection:keep-alive\nCookie:BAIDUID=C3C3DF1F2FCBAAC76D586A089D352B20:FG=1; BIDUPSID=C3C3DF1F2FCBAAC76D586A089D352B20; PSTM=1487486381; cflag=15%3A3\nHost:bdimg.share.baidu.com\nReferer:http://blog.csdn.net/zqjflash/article/details/50179235\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\n\n// post请求\nPOST /;jsessionid=0488BE7BC900465C2DC4BB8AB24590F7.tomcat1 HTTP/1.1\nHost: passport.csdn.net\nConnection: keep-alive\nContent-Length: 114\nCache-Control: max-age=0\nOrigin: https://passport.csdn.net\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\nContent-Type: application/x-www-form-urlencoded\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nReferer: https://passport.csdn.net/\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.8\nCookie: uuid_tt_dd=4631346229468547818_20170222; UN=qq_27190173; UE=""; BT=1487775919653; Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac=1488868447,1488871119,1488934143,1489065486; Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac=1489070690; JSESSIONID=0488BE7BC900465C2DC4BB8AB24590F7.tomcat1; LSSC=LSSC-103313-gsFvBex9lecaSC6m9Bwyn5tu5PxDgY-passport.csdn.net; _ga=GA1.2.861628891.1488380192; _gat=1; dc_tos=omjyg8; dc_session_id=1489070692647\n\n(----此处空一行---就是空行-)\n数据部分\nusername=12677641193&password=1212121212&lt=LT-85675-U1reLQcXULotRI4ZZYAJe6UqmNOkIz&execution=e1s1&_eventId=submit\n')])])]),a("h5",{attrs:{id:"http1-x-响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-x-响应头"}},[t._v("#")]),t._v(" http1.x 响应头")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HTTP/1.1 200 OK\nServer: openresty\nDate: Thu, 09 Mar 2017 14:48:23 GMT\nContent-Type: text/html;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nKeep-Alive: timeout=20\nPragma: no-cache\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\nCache-Control: no-cache\nCache-Control: no-store\nContent-Encoding: gzip\nVary: Accept-Encoding\n")])])]),a("h5",{attrs:{id:"http1-x-存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-x-存在的问题"}},[t._v("#")]),t._v(" http1.X 存在的问题")]),t._v(" "),a("ol",[a("li",[t._v("http1.0 每次只能发一个http请求，http1.1 使用"),a("code",[t._v("request pipelining")]),t._v("(请求流水线)(默认是关闭的，可以同时向服务器发多个请求【这里多个请求，不同的浏览器有不同的支持】，但是响应必须按顺序到达，比较鸡肋，详情看这里，"),a("a",{attrs:{href:"https://www.zhihu.com/question/20474326",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("并发请求数")]),a("OutboundLink")],1),t._v(")，比 http1.0 效率更好，但是依然存在"),a("code",[t._v("head-of-line blocking")]),t._v("(队头阻塞)，即在一个TCP连接上，由于TCP层数据包需要按顺序到达，假如http的包在传输过程中丢失的话，超时重传给服务器，等到数据包按顺序到达以后，才会给客户端发送数据，超时重传那一段在客户端看起来就是被阻塞了。")]),t._v(" "),a("li",[t._v("http1.x 每次的头部好多数据是冗余的，消耗了带宽，每次都重复传这些头部数据。")]),t._v(" "),a("li",[t._v("http1.1 相对于 http1.0 好的地方在于默认开启持久化连接，"),a("code",[t._v("Connection： keep-alive")]),t._v(",这样在一个TCP连接上，可以发多个http请求.")])]),t._v(" "),a("h4",{attrs:{id:"http2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),a("h5",{attrs:{id:"http2-0-请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0-请求头"}},[t._v("#")]),t._v(" http2.0 请求头")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(":authority:imququ.com\n:method:GET\n:path:/beacon.html?dt=%E4%BD%BF%E7%94%A8%20Wireshark%20%E8%B0%83%E8%AF%95%20HTTP%2F2%20%E6%B5%81%E9%87%8F%20%7C%20JerryQu%20%E7%9A%84%E5%B0%8F%E7%AB%99&dr=&ul=zh-CN&sd=24-bit&sr=1366x768&_=1489071389465\n:scheme:https\naccept:image/webp,image/*,*/*;q=0.8\naccept-encoding:gzip, deflate, sdch, br\naccept-language:zh-CN,zh;q=0.8\ncache-control:no-cache\ncookie:u=ee40d34c-d87a-40ce-a3bd-c4ea3e05b72d; v=44\npragma:no-cache\nreferer:https://imququ.com/post/http2-traffic-in-wireshark.html\nuser-agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\n")])])]),a("h5",{attrs:{id:"http2-0-响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0-响应头"}},[t._v("#")]),t._v(" http2.0 响应头")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('cache-control:no-cache\ndate:Thu, 09 Mar 2017 14:56:29 GMT\npublic-key-pins:pin-sha256="YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg="; pin-sha256="aef6IF2UF6jNEwA2pNmP7kpgT6NFSdt7Tqf5HzaIGWI="; max-age=2592000; includeSubDomains\nreferrer-policy:origin-when-cross-origin\nserver:nginx\nstatus:204\nstrict-transport-security:max-age=31536000; includeSubDomains; preload\nx-content-type-options:nosniff\nx-frame-options:deny\nx-via:Aliyun.QingDao\nx-xss-protection:1; mode=block\n')])])]),a("h5",{attrs:{id:"http2-0-应该满足条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0-应该满足条件"}},[t._v("#")]),t._v(" http2.0 应该满足条件")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("HTTP/2.0")]),t._v(" 通过支持首部字段压缩和在同一连接上发送多个并发消息，让应用更有效地利用网络资源，减少感知的延迟时间。而且，它还支持服务器到客户端的主动推送机制。")])]),t._v(" "),a("ul",[a("li",[t._v("相对于使用TCP 的HTTP 1.1 用户在大多数情况下的感知延迟要有实质上、可度量的改进；")]),t._v(" "),a("li",[t._v("解决 HTTP 中的“队首阻塞”问题；")]),t._v(" "),a("li",[t._v("并行操作无需与服务器建立多个连接，从而改进 TCP 的利用率，特别是拥塞控制方面；")]),t._v(" "),a("li",[t._v("保持 HTTP 1.1 的语义，利用现有文档，包括（但不限于）HTTP 方法、状态码、URI，以及首部字段；")]),t._v(" "),a("li",[t._v("明确规定 HTTP 2.0 如何与 HTTP 1.x 互操作，特别是在中间介质上；")]),t._v(" "),a("li",[t._v("明确指出所有新的可扩展机制以及适当的扩展策略。")])]),t._v(" "),a("h5",{attrs:{id:"http2-0二进制分帧机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0二进制分帧机制"}},[t._v("#")]),t._v(" http2.0二进制分帧机制")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("HTTP2.0")]),t._v(" 将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，"),a("code",[t._v("HTTP 2.0")]),t._v(" 的二进制分帧机制解决了"),a("code",[t._v("HTTP 1.x")]),t._v(" 中存在的队首阻塞问题，也消除了并行处理和发送请求及响应时对多个连接的依赖。")])]),t._v(" "),a("h6",{attrs:{id:"流、消息和帧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流、消息和帧"}},[t._v("#")]),t._v(" 流、消息和帧")]),t._v(" "),a("ul",[a("li",[t._v("流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；")]),t._v(" "),a("li",[t._v("消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。")]),t._v(" "),a("li",[t._v("帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等")])]),t._v(" "),a("blockquote",[a("p",[t._v("建立HTTP2.0连接后，客户端与服务器会通过交换帧来通信，帧是基于这个新协议通信的最小单位。所有帧都**"),a("code",[t._v("共享一个8字节的首部")]),t._v("**，其中包含帧的长度、类型、标志，还有一个保留位和一个31位的流标识符。如下图所示")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Bit")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("0-7")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("8-15")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("16-23")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("23-31")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("长度（0-15）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("标志")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("32")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("R（1bit）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("流标识符（1-31）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("64")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("R（1bit）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("优先值（1-31）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("首部块")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("发起新流\n\n    - 在发送应用数据之前，必须创建一个新流并随之发送相应的元数据，比如流优先级、HTTP 首部等；\n    - 客户端通过发送HEADERS帧来发起新流；\n    服务器通过发送 PUSH_PROMISE 帧来发起推送流。\n\n发送应用数据\n    - 创建新流并发送HTTP 首部之后，接下来就是利用DATA 帧。应用数据可以分为多个DATA 帧，最后一帧要翻转帧首部的END_STREAM 字段\n    - HTTP 2.0 标准要求DATA 帧不能超过2的14次方-1（16383）字节。长度超过这个阀值的数据，就得分帧发送。\n")])])]),a("p",[a("img",{attrs:{src:"http://omla9ld8j.bkt.clouddn.com/2017-03-10_171740.png",alt:"数据流"}})]),t._v(" "),a("h6",{attrs:{id:"多向请求与响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多向请求与响应"}},[t._v("#")]),t._v(" 多向请求与响应")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HTTP 2.0")]),t._v(" 中新的二进制分帧层突破了这些限制，实现了多向请求和响应：客户端和服务器可以把"),a("code",[t._v("HTTP")]),t._v(" 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来")]),t._v(" "),a("li",[t._v("把HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是"),a("code",[t._v("HTTP 2.0")]),t._v(" 最重要的一项增强。这个机制会在整个"),a("code",[t._v("Web")]),t._v("技术栈中引发一系列连锁反应，从而带来巨大的性能提升。")]),t._v(" "),a("li",[t._v("chrome 浏览器，可以开启6个并发"),a("img",{attrs:{src:"http://omla9ld8j.bkt.clouddn.com/2017-03-10_153645.png",alt:"并发数"}})])]),t._v(" "),a("h6",{attrs:{id:"请求优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求优先级"}},[t._v("#")]),t._v(" 请求优先级")]),t._v(" "),a("ul",[a("li",[t._v("把HTTP 消息分解为很多独立的帧之后，就可以通过优化这些帧的交错和传输顺序，每个流都可以带有一个31 比特的优先值：0 表示最高优先级；2的31次方-1 表示最低优先级。")]),t._v(" "),a("li",[t._v("服务器可以根据流的优先级，控制资源分配（CPU、内存、带宽），而在响应数据准备好之后，优先将最高优先级的帧发送给客户端。")]),t._v(" "),a("li",[a("code",[t._v("HTTP 2.0")]),t._v(" 一举解决了所有这些低效的问题：浏览器可以在发现资源时立即分派请求，指定每个流的优先级，让服务器决定最优的响应次序。这样请求就不必排队了，既节省了时间，也最大限度地利用了每个连接。")])]),t._v(" "),a("h6",{attrs:{id:"单条tcp持久连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单条tcp持久连接"}},[t._v("#")]),t._v(" 单条TCP持久连接")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 2.0 连接都是持久化的，而且客户端与服务器之间也只需要一个连接即可。")])]),t._v(" "),a("h6",{attrs:{id:"流量控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),a("ul",[a("li",[t._v("流量控制基于每一跳进行，而非端到端的控制；")]),t._v(" "),a("li",[t._v("流量控制基于窗口更新帧进行，即接收方广播自己准备接收某个数据流的多少字节，以及对整个连接要接收多少字节；")]),t._v(" "),a("li",[t._v("流量控制窗口大小通过 WINDOW_UPDATE 帧更新，这个字段指定了流 ID 和窗口大小递增值；")]),t._v(" "),a("li",[t._v("流量控制有方向性，即接收方可能根据自己的情况为每个流乃至整个连接设置任意窗口大小；")]),t._v(" "),a("li",[t._v("流量控制可以由接收方禁用，包括针对个别的流和针对整个连接。")])]),t._v(" "),a("h5",{attrs:{id:"服务器推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HTTP 2.0")]),t._v(" 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。服务器向客户端推送资源无需客户端明确地请求。")]),t._v(" "),a("li",[a("code",[t._v("HTTP 2.0")]),t._v(" 连接后，客户端与服务器交换"),a("code",[t._v("SETTINGS")]),t._v(" 帧，借此可以限定双向并发的流的最大数量。因此，客户端可以限定推送流的数量，或者通过把这个值设置为0 而完全禁用服务器推送。")]),t._v(" "),a("li",[t._v("所有推送的资源都遵守同源策略。换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。")]),t._v(" "),a("li",[a("code",[t._v("PUSH_PROMISE")]),t._v("：所有服务器推送流都由PUSH_PROMISE 发端，服务器向客户端发出的有意推送所述资源的信号。客户端接收到PUSH_PROMISE 帧之后，可以视自身需求选择拒绝这个流")])]),t._v(" "),a("h5",{attrs:{id:"首部压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首部压缩"}},[t._v("#")]),t._v(" 首部压缩")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("http2.0")]),t._v("会压缩首部元数据：在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；“首部表”在http2.0的连接存续期内始终存在，由客户端和服务器共同渐进地更新；每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。")])]),t._v(" "),a("h4",{attrs:{id:"扩展spdy-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展spdy-协议"}},[t._v("#")]),t._v(" 扩展"),a("code",[t._v("SPDY 协议")])]),t._v(" "),a("h4",{attrs:{id:"http2-0升级与发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0升级与发现"}},[t._v("#")]),t._v(" HTTP2.0升级与发现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("通过TLS和ALPN发起新的HTTPS连接；\n"),a("img",{attrs:{src:"http://omla9ld8j.bkt.clouddn.com/2017-03-10_153907.png",alt:"ALPN-Clent Hello"}}),t._v(" "),a("img",{attrs:{src:"http://omla9ld8j.bkt.clouddn.com/2017-03-10_160114.png",alt:"ALPN-Server Hello"}})])]),t._v(" "),a("li",[a("p",[t._v("根据之前的信息发起新的HTTP连接；")])]),t._v(" "),a("li",[a("p",[t._v("没有之前的信息而发起新的HTTP连接。")])]),t._v(" "),a("li",[a("p",[t._v("通过常规非加密信道建立HTTP2.0连接需要多做一点工作。因为HTTP1.0和HTTP2.0都使用同一个端口（80），有没有服务器是否支持HTTP2.0的其他任何信息，此时客户端只能使用HTTP Upgrade机制通过协调确定适当的协议：")]),t._v(" "),a("div",{staticClass:"language-这基本不常见，因为目前大部分支持http2的都是https extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Upgrade: HTTP/2.0 \nHTTP2-Settings: (SETTINGS payload) \nHTTP/1.1 200 OK \nHTTP/1.1 101 Switching Protocols \n\n发起带有HTTP 2.0 Upgrade 首部的HTTP 1.1 请求\nHTTP/2.0 SETTINGS 净荷的Base64 URL 编码\n服务器拒绝升级，通过HTTP 1.1 返回响应\n服务器接受HTTP 2.0 升级，切换到新分帧\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"http2性能评估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2性能评估"}},[t._v("#")]),t._v(" http2性能评估")])])}),[],!1,null,null,null);e.default=c.exports}}]);